// <auto-generated>
// This file was generated automatically by GenerateFromSchema. Do NOT edit it.
// https://github.com/AnalyticalGraphicsInc/czml-writer
// </auto-generated>

using CesiumLanguageWriter.Advanced;
using System;
using JetBrains.Annotations;

namespace CesiumLanguageWriter
{
    /// <summary>
    /// Writes a <c>SensorVolumePortionToDisplay</c> to a <see cref="CesiumOutputStream" />. A <c>SensorVolumePortionToDisplay</c> is what part of a sensor should be displayed.
    /// </summary>
    public class SensorVolumePortionToDisplayCesiumWriter : CesiumPropertyWriter<SensorVolumePortionToDisplayCesiumWriter>
    {
        /// <summary>
        /// The name of the <c>portionToDisplay</c> property.
        /// </summary>
        public const string PortionToDisplayPropertyName = "portionToDisplay";

        /// <summary>
        /// The name of the <c>reference</c> property.
        /// </summary>
        public const string ReferencePropertyName = "reference";

        /// <summary>
        /// The name of the <c>delete</c> property.
        /// </summary>
        public const string DeletePropertyName = "delete";

        private readonly Lazy<ICesiumValuePropertyWriter<CesiumSensorVolumePortionToDisplay>> m_asPortionToDisplay;
        private readonly Lazy<ICesiumValuePropertyWriter<Reference>> m_asReference;

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="propertyName">The name of the property.</param>
        public SensorVolumePortionToDisplayCesiumWriter([NotNull] string propertyName)
            : base(propertyName)
        {
            m_asPortionToDisplay = new Lazy<ICesiumValuePropertyWriter<CesiumSensorVolumePortionToDisplay>>(CreatePortionToDisplayAdaptor, false);
            m_asReference = new Lazy<ICesiumValuePropertyWriter<Reference>>(CreateReferenceAdaptor, false);
        }

        /// <summary>
        /// Initializes a new instance as a copy of an existing instance.
        /// </summary>
        /// <param name="existingInstance">The existing instance to copy.</param>
        protected SensorVolumePortionToDisplayCesiumWriter([NotNull] SensorVolumePortionToDisplayCesiumWriter existingInstance)
            : base(existingInstance)
        {
            m_asPortionToDisplay = new Lazy<ICesiumValuePropertyWriter<CesiumSensorVolumePortionToDisplay>>(CreatePortionToDisplayAdaptor, false);
            m_asReference = new Lazy<ICesiumValuePropertyWriter<Reference>>(CreateReferenceAdaptor, false);
        }

        /// <inheritdoc />
        public override SensorVolumePortionToDisplayCesiumWriter Clone()
        {
            return new SensorVolumePortionToDisplayCesiumWriter(this);
        }

        /// <summary>
        /// Writes the value expressed as a <c>portionToDisplay</c>, which is the part of a sensor to display.
        /// </summary>
        /// <param name="value">The portion of the sensor to display.</param>
        public void WritePortionToDisplay(CesiumSensorVolumePortionToDisplay value)
        {
            const string PropertyName = PortionToDisplayPropertyName;
            if (ForceInterval)
            {
                OpenIntervalIfNecessary();
            }
            if (IsInterval)
            {
                Output.WritePropertyName(PropertyName);
            }
            Output.WriteValue(CesiumFormattingHelper.SensorVolumePortionToDisplayToString(value));
        }

        /// <summary>
        /// Writes the value expressed as a <c>reference</c>, which is the part of a sensor to display, specified as a reference to another property.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteReference(Reference value)
        {
            const string PropertyName = ReferencePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteReference(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>reference</c>, which is the part of a sensor to display, specified as a reference to another property.
        /// </summary>
        /// <param name="value">The earliest date of the interval.</param>
        public void WriteReference(string value)
        {
            const string PropertyName = ReferencePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteReference(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>reference</c>, which is the part of a sensor to display, specified as a reference to another property.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteReference(string identifier, string propertyName)
        {
            const string PropertyName = ReferencePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteReference(Output, identifier, propertyName);
        }

        /// <summary>
        /// Writes the value expressed as a <c>reference</c>, which is the part of a sensor to display, specified as a reference to another property.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteReference(string identifier, string[] propertyNames)
        {
            const string PropertyName = ReferencePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteReference(Output, identifier, propertyNames);
        }

        /// <summary>
        /// Writes the value expressed as a <c>delete</c>, which is whether the client should delete existing samples or interval data for this property. Data will be deleted for the containing interval, or if there is no containing interval, then all data. If true, all other properties in this property will be ignored.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteDelete(bool value)
        {
            const string PropertyName = DeletePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(value);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumValuePropertyWriter{T}" /> to write a value in <c>PortionToDisplay</c> format. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close" /> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        public ICesiumValuePropertyWriter<CesiumSensorVolumePortionToDisplay> AsPortionToDisplay()
        {
            return m_asPortionToDisplay.Value;
        }

        private ICesiumValuePropertyWriter<CesiumSensorVolumePortionToDisplay> CreatePortionToDisplayAdaptor()
        {
            return new CesiumWriterAdaptor<SensorVolumePortionToDisplayCesiumWriter, CesiumSensorVolumePortionToDisplay>(this, (me, value) => me.WritePortionToDisplay(value));
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumValuePropertyWriter{T}" /> to write a value in <c>Reference</c> format. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close" /> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        public ICesiumValuePropertyWriter<Reference> AsReference()
        {
            return m_asReference.Value;
        }

        private ICesiumValuePropertyWriter<Reference> CreateReferenceAdaptor()
        {
            return new CesiumWriterAdaptor<SensorVolumePortionToDisplayCesiumWriter, Reference>(this, (me, value) => me.WriteReference(value));
        }

    }
}
